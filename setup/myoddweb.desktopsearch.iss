; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "desktopsearch"
#define AppVersion "0.1.0"
#define AppURL "http://www.myoddweb.com/"
#define AppExeName "myoddweb.desktopsearch.exe"
#define RootFolder ".."
#define InstallPath "{pf}\myoddweb"
#define UserAppData "{userappdata}\myoddweb\desktopsearch"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{4E72E85A-13D7-43EC-B6A1-D321734E647E}
AppName={#AppName}
AppVersion={#AppVersion}
;AppVerName={#AppName} {#AppVersion}
AppPublisherURL={#AppURL}
AppSupportURL={#AppURL}
AppUpdatesURL={#AppURL}
DefaultDirName={#InstallPath}\{#AppName}
DisableProgramGroupPage=yes
LicenseFile={#RootFolder}\LICENSE
OutputBaseFilename=myoddweb.desktopsearch.setup
Compression=lzma
SolidCompression=yes
ArchitecturesInstallIn64BitMode=x64 ia64

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
; configs.
Source: "config.json"; DestDir: "{app}"; Flags: ignoreversion onlyifdoesntexist
Source: "desktop.json"; DestDir: "{#UserAppData}"; Flags: onlyifdoesntexist

Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.service.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\EntityFramework.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\EntityFramework.SqlServer.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.helper.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.http.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.interfaces.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.parser.code.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.parser.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.parser.text.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.desktopsearch.processor.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\myoddweb.directorywatcher.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\Newtonsoft.Json.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\nunit.framework.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\System.Data.SQLite.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\System.Data.SQLite.EF6.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\System.Data.SQLite.Linq.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\x86\SQLite.Interop.dll"; DestDir: "{app}\x86"; Flags: ignoreversion
Source: "{#RootFolder}\src\bin\Release\x64\SQLite.Interop.dll"; DestDir: "{app}\x64"; Flags: ignoreversion

[Icons]
Name: "{commonprograms}\{#AppName}"; Filename: "{app}\{#AppExeName}"; Parameters: "--config ""{#UserAppData}\desktop.json"""
Name: "{commondesktop}\{#AppName}"; Filename: "{app}\{#AppExeName}"; Parameters: "--config ""{#UserAppData}\desktop.json"""; Tasks: desktopicon

[Run]
Filename: "{app}\{#AppExeName}"; Parameters: "--config ""{#UserAppData}\desktop.json"""; Flags: nowait postinstall skipifsilent runascurrentuser; Description: "{cm:LaunchProgram,{#StringChange(AppName, '&', '&&')}}"

[Code]
// Get the service path
function ServicePath: string;
begin
  Result := ExpandConstant('{app}\myoddweb.desktopsearch.service.exe');
end;

function ServiceName: string;
begin
  Result := 'Myoddweb.DesktopSearch Service';
end;

// Stop the service if running
function StopService(): Boolean;
var
  ResultCode: integer;
  Path: String;
  WasVisible: Boolean;
begin

  try
    WizardForm.PreparingLabel.Visible := True;
    
    Path := ServicePath();
    if FileExists(Path) = false then
    begin
      Result := false;
    end

    // stop it
    WizardForm.PreparingLabel.Caption := 'Stopping the service';
    Exec( 'NET', 'STOP "'+ServiceName()+'"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Result := true;
  finally
    // restore the original visibility state
    WizardForm.PreparingLabel.Visible := WasVisible;
  end;

end;

// Start the service
function StartService(): Boolean;
var
  ResultCode: integer;
  Path: String;
begin

  Path := ServicePath();
  if FileExists(Path) = false then
  begin
    Result := false;
  end

  Exec( 'NET', 'START "'+ServiceName()+'"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Result := true;
end;

// Uninstall the service
function UninstallService(): Boolean;
var
  ResultCode: integer;
  Path: String;
begin

  Path := ServicePath();
  if FileExists(Path) = false then
  begin
    Result := false;
  end

  // stop the service
  StopService();

  // uninstall it.
  Exec( Path, '--uninstall', ExpandConstant( '{app}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Result := true;
end;

// Uninstall the service
function InstallService(): Boolean;
var
  WasVisible: Boolean;
  ResultCode: integer;
  Path: String;
begin

  try
    WizardForm.PreparingLabel.Visible := True;

    Path := ServicePath();
    if FileExists(Path) = false then
    begin
      Result := false;
    end

    // stop the service
    StopService();

    // install it.
    WizardForm.PreparingLabel.Caption := 'Installing the service';
    Exec( Path, '--install --config config.json', ExpandConstant( '{app}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);

  finally
    // restore the original visibility state
    WizardForm.PreparingLabel.Visible := WasVisible;
  end;

  Result := true;
end;

// stop the service and uninstall it, if need be.
function StopAndUninstallService(): Boolean;
begin

  // stop the service
  StopService();

  // then uninstall it
  UninstallService();

  Result := true;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  WasVisible: Boolean;
begin
  // store the original visibility state
  WasVisible := WizardForm.PreparingLabel.Visible;
  try
    WizardForm.PreparingLabel.Visible := True;
    WizardForm.PreparingLabel.Caption := 'Stopping the Service if Running';
    
    // stop the service if it is running.
    StopService();

  finally
    // restore the original visibility state
    WizardForm.PreparingLabel.Visible := WasVisible;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  Log('CurStepChanged(' + IntToStr(Ord(CurStep)) + ') called');
  if CurStep = ssPostInstall then
  begin
    InstallService();
    StartService();
  end;
end;